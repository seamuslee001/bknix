#!/usr/bin/env bash
set -e

## I shouldn't exist! Yet I do! This is a quick hack that doesn't really do
## a nice job of managing processes.
##
## I'd like to see something more like http://supervisord.org/ (which is a non-root process manager)...



###########################################################
## Variables

PROG=$(basename "$0")
DATADIR="$BKNIXDIR/var"
BKIT_BASE="$BKNIXDIR/civicrm-buildkit"
MYSQL_BASE="$BKNIXDIR/var/mysql"
HTTPD_BASE="$BKNIXDIR/var/httpd"
PHPFPM_BASE="$BKNIXDIR/var/php-fpm"
REDIS_BASE="$BKNIXDIR/var/redis"
BKIT_PORT=8001
FORCE_INIT=

###########################################################
## Library

function bknix_validate() {
  if [ -z "$BKNIXSRC" -o ! -d "$BKNIXSRC" ]; then
    echo "ERROR: Missing expected variable: BKNIXSRC"
  fi
  if [ -z "$BKNIXDIR" ]; then
    echo "ERROR: Missing expected variable: BKNIXDIR"
  fi
  if [ -z "$AMPHOME" ]; then
    echo "ERROR: Missing expected variable: AMPHOME"
  fi
  if [ -z "$MYSQL_HOME" ]; then
    echo "ERROR: Missing expected variable: MYSQL_HOME"
  fi

  if [ -z "$BKNIXSRC" -o ! -d "$BKNIXSRC" -o -z "$BKNIXDIR" -o  -z "$AMPHOME" -o -z "$MYSQL_HOME" ]; then
    echo
    echo "You may wish to set the environment variables. Try one of these:"
    echo "1. Run commands through bknix's \"nix-shell\", which will automatically initialize the variables."
    echo "2. In your .profile or .bashrc, use \"eval \`bknix shell\`\" to initialize the variables."
    exit 2
  fi
}

function cmd_httpd_init() {
  if [ -n "$FORCE_INIT" -o ! -e "$HTTPD_BASE" ]; then
    echo "($PROG) Initialize httpd config ($HTTPD_BASE)"
    REALHTTPDIR=$(dirname $(dirname $(which httpd)))
    mkdir -p "$HTTPD_BASE" "$HTTPD_BASE/logs" "$HTTPD_BASE/conf" "$HTTPD_BASE/htdocs"
    if [ ! -f "$HTTPD_BASE/htdocs/index.html" ]; then
      echo "<html><body>Placeholder</body></html>" > "$HTTPD_BASE/htdocs/index.html"
    fi
    for SUBDIR in bin cgi-bin error icons modules ;do
      [ ! -e "$HTTPD_BASE/$SUBDIR" ] && ln -s "$REALHTTPDIR/$SUBDIR" "$HTTPD_BASE/$SUBDIR"
    done

    cp -r "$BKNIXSRC/templates/httpd"/* "$HTTPD_BASE/conf/"
    chmod -R u+rw "$HTTPD_BASE/conf/"
    cat "$BKNIXSRC/templates/httpd/httpd.conf.tmpl" | sed "s;%%BKNIXDIR%%;$BKNIXDIR;g" >  "$HTTPD_BASE/conf/httpd.conf"
  fi
}

function cmd_mysql_init() {
  if false; then echo; fi
  ## DB init
  #m mkdir -p "$MYSQL_BASE" "$MYSQL_BASE/tmp" "$MYSQL_BASE/conf"
  #m sed "s;%%BKNIXDIR%%;$BKNIXDIR;g" < "$BKNIXSRC/templates/my.cnf.tmpl" > "$MYSQL_BASE/conf/my.cnf"
  #m rm -rf "$MYSQL_BASE/data" ## REVERT
  #m if [ ! -d "$MYSQL_BASE/data" ]; then
  #m  echo "($PROG) Initialize MySQL database"
  #m  mysql_install_db
  #m fi
}

function cmd_bkit_init() {
  if [ ! -e "$BKIT_BASE" ]; then
    echo "($PROG) Download buildkit ($BKIT_BASE)"
    git clone https://github.com/civicrm/civicrm-buildkit "$BKIT_BASE"
    civi-download-tools
  fi

  if [ -n "$FORCE_INIT" -o ! -e "$AMPHOME/services.yml" ]; then
    echo "($PROG) Initialize amp config ($AMPHOME)"
    mkdir -p "$AMPHOME"
    amp config:set \
      --httpd_type=apache24 \
      --httpd_restart_command="apachectl -d $HTTPD_BASE -k graceful" \
      --httpd_visibility="local" \
      --httpd_shared_ports="80,$BKIT_PORT" \
      --hosts_type="file" \
      --db_type="mysql_ram_disk" \
      --perm_type=none
  fi

  if [ -n "$FORCE_INIT" -o ! -e "$BKIT_BASE/app/civibuild.conf" ]; then
    echo "($PROG) Initialize civibuild config ($BKIT_BASE/app/civibuild.conf)"
    echo 'if [ -z "$BKNIXDIR" ]; then echo "Undefined: BKNIXDIR" >&2 ; exit 1; fi' >> "$BKIT_BASE/app/civibuild.conf"
    echo 'BLDDIR="$BKNIXDIR/build"' >> "$BKIT_BASE/app/civibuild.conf"
    echo "URL_TEMPLATE=\"http://%SITE_NAME%.bknix:$BKIT_PORT\"" >> "$BKIT_BASE/app/civibuild.conf"
  fi
}

function cmd_phpfpm_init() {
  if [ -n "$FORCE_INIT" -o ! -e "$PHPFPM_BASE" ]; then
    echo "($PROG) Initialize php-fpm config ($PHPFPM_BASE)"
    mkdir -p "$PHPFPM_BASE"

    cat "$BKNIXSRC/templates/php-fpm.conf.tmpl" | sed "s;%%BKNIXDIR%%;$BKNIXDIR;g" > "$PHPFPM_BASE/php-fpm.conf"
  fi
}

function cmd_redis_init() {
  if [ -n "$FORCE_INIT" -o ! -e "$REDIS_BASE" ]; then
    echo "($PROG) Initialize redis config ($REDIS_BASE)"
    mkdir -p "$REDIS_BASE"
    cat "$BKNIXSRC/templates/redis.conf.tmpl" | sed "s;%%BKNIXDIR%%;$BKNIXDIR;g" > "$REDIS_BASE/redis.conf"
  fi
}

function cmd_init() {
  cmd_mysql_init
  cmd_redis_init
  cmd_phpfpm_init
  cmd_httpd_init
  cmd_bkit_init
}

function cmd_run() {
  "$BKNIXSRC"/bkrun "$@"
}

function cmd_purge() {
  echo "About to purge all configuration and data."
  echo "Please ensure that you've stopped any running services first."
  echo -n "Continue? (y/N) "
  read resp
  if [ "$resp" = "y" ]; then
    echo "Purging..."
    [ -d "$HTTPD_BASE" ] && rm -rf "$HTTPD_BASE"
    [ -d "$AMPHOME" ] && rm -rf "$AMPHOME"
    [ -d "$MYSQL_HOME" ] && rm -rf "$MYSQL_HOME"
    [ -f "$BKIT_BASE/app/civibuild.conf" ] && rm -f "$BKIT_BASE/app/civibuild.conf"
  else
    echo "Nevermind"
  fi
}

function cmd_bkit_update() {
  pushd "$BKIT_BASE" >> /dev/null
    git pull
    ./bin/civi-download-tools
  popd >> /dev/null
}

function cmd_help() {
    echo "usage:"
    echo "  $PROG help            Show help"
    echo "  $PROG env             Generate bash configuration commands"
    echo "  $PROG init            Initialize config and data files"
    echo "  $PROG run             Run all daemons in foreground"
    echo "  $PROG update          Update tools"
}

function cmd_env() {
  echo 'export BKNIXDIR="$HOME/bknix"'
  echo 'export PATH="$HOME/bknix/civicrm-buildkit/bin:$PATH"'
  echo 'export AMPHOME="$HOME/bknix/var/amp"'
  echo 'export MYSQL_HOME="$HOME/bknix/var/mysql/conf"'
}

###########################################################
## Main

CMD="help"
if [ -n "$1" ]; then
  CMD="$1"
  shift
fi
case "$CMD" in
  env)           cmd_env; ;;
  init)          bknix_validate; FORCE_INIT=1 ; cmd_init ;;
  run)           bknix_validate; cmd_init ; cmd_run ;;

  purge)         bknix_validate; cmd_purge ;;
  update)        bknix_validate; cmd_bkit_init; cmd_bkit_update ;;

  help)          cmd_help ;;
  *)             cmd_help ; exit 1 ;;
esac
