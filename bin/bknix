#!/bin/bash
set -e

## I shouldn't exist! Yet I do! This is a quick hack that doesn't really do
## a nice job of managing processes.
##
## I'd like to see something more like http://supervisord.org/ (which is a non-root process manager)...

if [ -z "$BKNIXDIR" -o ! -d "$BKNIXDIR" ]; then
  echo "Aborting. This command should only run within nix-shell."
  exit 2
fi

###########################################################
## Variables

PROG=$(basename "$0")
DATADIR="$BKNIXDIR/var"
BKIT_BASE="$BKNIXDIR/civicrm-buildkit"
MYSQL_BASE="$BKNIXDIR/var/mysql"
HTTPD_BASE="$BKNIXDIR/var/httpd"
PHPFPM_BASE="$BKNIXDIR/var/php-fpm"
REDIS_BASE="$BKNIXDIR/var/redis"
BKIT_PORT=8001

###########################################################
## Library

function bknix_validate() {
  if [ -z "$AMPHOME" ]; then
    echo "Missing expected variable: AMPHOME"
    exit 10
  fi
  if [ -z "$MYSQL_HOME" ]; then
    echo "Missing expected variable: MYSQL_HOME"
    exit 10
  fi
}

function cmd_httpd_init() {
  if [ ! -e "$HTTPD_BASE" ]; then
    echo "($PROG) Initialize httpd config ($HTTPD_BASE)"
    REALHTTPDIR=$(dirname $(dirname $(which httpd)))
    mkdir -p "$HTTPD_BASE" "$HTTPD_BASE/logs" "$HTTPD_BASE/conf" "$HTTPD_BASE/htdocs"
    if [ ! -f "$HTTPD_BASE/htdocs/index.html" ]; then
      echo "<html><body>mynix laceholder</body></html>" > "$HTTPD_BASE/htdocs/index.html"
    fi
    for SUBDIR in bin cgi-bin error icons modules ;do
      [ ! -e "$HTTPD_BASE/$SUBDIR" ] && ln -s "$REALHTTPDIR/$SUBDIR" "$HTTPD_BASE/$SUBDIR"
    done
  fi
  rsync -a "$BKNIXDIR/config/httpd/./" "$HTTPD_BASE/conf/./"
  cat "$BKNIXDIR/config/httpd/httpd.conf.tmpl" | sed "s;%%BKNIXDIR%%;$BKNIXDIR;g" >  "$HTTPD_BASE/conf/httpd.conf"
}

function cmd_mysql_init() {
  if false; then echo; fi
  ## DB init
  #m mkdir -p "$MYSQL_BASE" "$MYSQL_BASE/tmp" "$MYSQL_BASE/conf"
  #m sed "s;%%BKNIXDIR%%;$BKNIXDIR;g" < "$BKNIXDIR/config/my.cnf.tmpl" > "$MYSQL_BASE/conf/my.cnf"
  #m rm -rf "$MYSQL_BASE/data" ## REVERT
  #m if [ ! -d "$MYSQL_BASE/data" ]; then
  #m  echo "($PROG) Initialize MySQL database"
  #m  mysql_install_db
  #m fi
}

function cmd_bkit_init() {
  if [ ! -e "$BKIT_BASE" ]; then
    echo "($PROG) Download buildkit ($BKIT_BASE)"
    git clone https://github.com/civicrm/civicrm-buildkit "$BKIT_BASE"
    civi-download-tools
  fi

  if [ ! -e "$AMPHOME/services.yml" ]; then
    echo "($PROG) Initialize amp config ($AMPHOME)"
    mkdir -p "$AMPHOME"
    amp config:set \
      --httpd_type=apache24 \
      --httpd_restart_command="apachectl -d $HTTPD_BASE -k graceful" \
      --httpd_visibility="local" \
      --httpd_shared_ports="80,$BKIT_PORT" \
      --hosts_type="file" \
      --db_type="mysql_ram_disk" \
      --perm_type=none
  fi

  if [ ! -e "$BKIT_BASE/app/civibuild.conf" ]; then
    echo "($PROG) Initialize civibuild config ($BKIT_BASE/app/civibuild.conf)"
    echo "BLDDIR=\"$BKNIXDIR/build\"" >> "$BKIT_BASE/app/civibuild.conf"
    echo "URL_TEMPLATE=\"http://%SITE_NAME%.bknix:$BKIT_PORT\"" >> "$BKIT_BASE/app/civibuild.conf"
  fi
}

function cmd_mysql_start() {
  echo "($PROG) Start mysqld -- Skipped: mysqld will auto-start when you create or restore a database"
  #mysqld_safe &
}

function cmd_mysql_stop() {
  # [ -f "$MYSQL_BASE/mysql.pid" ] && kill $(cat "$MYSQL_BASE/mysql.pid")
  if [ -f "$AMPHOME/ram_disk/mysqld.pid" ]; then
    echo "($PROG) Stop mysqld"
    kill $(cat "$AMPHOME/ram_disk/mysqld.pid" )
    rm -f "$AMPHOME/ram_disk/mysqld.pid"
    echo "($PROG) TIP: If mysqld was launched with ramdisk, you may want to destroy the ramdisk. Use \"Disk Utility\" (OSX) or \"sudo umount <path>\" (Linux)."
  else
    echo "($PROG) Already stopped mysqld"
  fi
}

function cmd_phpfpm_init() {
  if [ ! -e "$PHPFPM_BASE" ]; then
    echo "($PROG) Initialize php-fpm config ($PHPFPM_BASE)"
    mkdir -p "$PHPFPM_BASE"
  fi
  cat "$BKNIXDIR/config/php-fpm.conf.tmpl" | sed "s;%%BKNIXDIR%%;$BKNIXDIR;g" > "$PHPFPM_BASE/php-fpm.conf"
}

function cmd_phpfpm_start() {
  echo "($PROG) Start php-fpm"
  php-fpm -y "$PHPFPM_BASE/php-fpm.conf" -D
}

function cmd_phpfpm_stop() {
  if [ -f "$PHPFPM_BASE/php-fpm.pid" ]; then
    echo "($PROG) Stop php-fpm"
    kill $(cat "$PHPFPM_BASE/php-fpm.pid" )
    rm -f "$PHPFPM_BASE/php-fpm.pid"
  else
    echo "($PROG) Already stopped php-fpm"
  fi
}

function cmd_httpd_start() {
  echo "($PROG) Start httpd"
  apachectl -d "$HTTPD_BASE" -k start
}

function cmd_httpd_test() {
  echo "($PROG) Test httpd config"
  apachectl -d "$HTTPD_BASE" -t
}

function cmd_httpd_stop() {
  echo "($PROG) Stop httpd"
  apachectl -d "$HTTPD_BASE" -k stop
}

function cmd_redis_init() {
  if [ ! -e "$REDIS_BASE" ]; then
    echo "($PROG) Initialize redis config ($REDIS_BASE)"
    mkdir -p "$REDIS_BASE"
  fi
  cat "$BKNIXDIR/config/redis.conf.tmpl" | sed "s;%%BKNIXDIR%%;$BKNIXDIR;g" > "$REDIS_BASE/redis.conf"
}

function cmd_redis_start() {
  echo "($PROG) Start redis"
  redis-server "$REDIS_BASE/redis.conf"
}

function cmd_redis_stop() {
  if [ -f "$REDIS_BASE/redis.pid" ]; then
    echo "($PROG) Stop redis"
    kill $(cat "$REDIS_BASE/redis.pid" )
    rm -f "$REDIS_BASE/redis.pid"
  else
    echo "($PROG) Already stopped redis"
  fi
}

function cmd_init() {
  cmd_mysql_init
  cmd_redis_init
  cmd_phpfpm_init
  cmd_httpd_init
  cmd_bkit_init
}

function cmd_start() {
  cmd_mysql_start
  cmd_redis_start
  cmd_phpfpm_start
  cmd_httpd_start
}

function cmd_stop() {
  cmd_httpd_stop
  cmd_redis_stop
  cmd_phpfpm_stop
  cmd_mysql_stop
}

function cmd_purge() {
  echo "About to purge all configuration and data."
  echo "Please ensure that you've stopped any running services first."
  echo -n "Continue? (y/N) "
  read resp
  if [ "$resp" = "y" ]; then
    echo "Purging..."
    [ -d "$HTTPD_BASE" ] && rm -rf "$HTTPD_BASE"
    [ -d "$AMPHOME" ] && rm -rf "$AMPHOME"
    [ -d "$MYSQL_HOME" ] && rm -rf "$MYSQL_HOME"
    [ -f "$BKIT_BASE/app/civibuild.conf" ] && rm -f "$BKIT_BASE/app/civibuild.conf"
  else
    echo "Nevermind"
  fi
}

function cmd_bkit_update() {
  pushd "$BKIT_BASE" >> /dev/null
    git pull
    ./bin/civi-download-tools
  popd >> /dev/null
}

function cmd_help() {
    echo "usage:"
    echo "  $PROG help            Show help"
    echo "  $PROG init            Initialize config and data files"
    echo "  $PROG start           Start all daemons"
    echo "  $PROG restart         Restart all daemons"
    echo "  $PROG stop            Stop all daemons"
    echo "  $PROG update          Update tools"
    echo ""
    echo "  $PROG bkit:init       Initialize config and data files"
    echo ""
    echo "  $PROG <service>:init      Initialize config and data files (Supported by: php-fpm, redis, http)"
    echo "  $PROG <service>:start     Start daemon (Supported by: php-fpm, redis, http)"
    echo "  $PROG <service>:restart   Restart daemon (Supported by: php-fpm, redis, http)"
    echo "  $PROG <service>:stop      Stop daemon (Supported by: php-fpm, redis, http, mysql)"
    echo "  $PROG <service>:test      Test daemon (Supported by: http)"
}

###########################################################
## Main

case "$1" in
  httpd:init)    bknix_validate; cmd_httpd_init  ;;
  httpd:restart) bknix_validate; cmd_httpd_init; cmd_httpd_stop; sleep 1; cmd_httpd_start ;;
  httpd:start)   bknix_validate; cmd_httpd_init; cmd_httpd_start ;;
  httpd:stop)    bknix_validate; cmd_httpd_stop ;;
  httpd:test)    bknix_validate; cmd_httpd_init ;cmd_httpd_test ;;

  mysql:init)    bknix_validate; cmd_mysql_init ;;
  mysql:restart) bknix_validate; cmd_mysql_init; cmd_mysql_stop; sleep 1; cmd_mysql_start ;;
  mysql:start)   bknix_validate; cmd_mysql_init; cmd_mysql_start ;;
  mysql:stop)    bknix_validate; cmd_mysql_stop ;;

  php-fpm:init)    bknix_validate; cmd_phpfpm_init ;;
  php-fpm:restart) bknix_validate; cmd_phpfpm_init; cmd_phpfpm_stop; sleep 1; cmd_phpfpm_start ;;
  php-fpm:start)   bknix_validate; cmd_phpfpm_init; cmd_phpfpm_start ;;
  php-fpm:stop)    bknix_validate; cmd_phpfpm_stop ;;

  redis:init)    bknix_validate; cmd_redis_init ;;
  redis:restart) bknix_validate; cmd_redis_init; cmd_redis_stop; sleep 1; cmd_redis_start ;;
  redis:start)   bknix_validate; cmd_redis_init; cmd_redis_start ;;
  redis:stop)    bknix_validate; cmd_redis_stop ;;

  bkit:init)     bknix_validate; cmd_bkit_init ;;
  bkit:update)   bknix_validate; cmd_bkit_init; cmd_bkit_update ;;

  init)          bknix_validate; cmd_init ;;
  restart)       bknix_validate; cmd_init; cmd_stop; sleep 1; cmd_start ;;
  start)         bknix_validate; cmd_init; cmd_start ;;
  stop)          bknix_validate; cmd_stop ;;

  purge)         bknix_validate; cmd_purge ;;
  update)        bknix_validate; cmd_bkit_init; cmd_bkit_update ;;

  help)          cmd_help ;;
  *)             cmd_help ; exit 1 ;;
esac
